
---
title: "Biostat 203B Homework 1"
subtitle: Due Jan 24, 2024 @ 11:59PM
author: Ningke Zhang 705834790
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
---

Display machine information for reproducibility:
```{r}
#| eval: true
sessionInfo()
```

## Q1. Git/GitHub

**No handwritten homework reports are accepted for this course.** We work with Git and GitHub. Efficient and abundant use of Git, e.g., frequent and well-documented commits, is an important criterion for grading your homework.

1. Apply for the [Student Developer Pack](https://education.github.com/pack) at GitHub using your UCLA email. You'll get GitHub Pro account for free (unlimited public and private repositories).

**Solution:** Done.

2. Create a **private** repository `biostat-203b-2025-winter` and add `Hua-Zhou` and TA team (`Tomoki-Okuno` for Lec 1; `parsajamshidian` and `BowenZhang2001` for Lec 82) as your collaborators with write permission.

**Solution:** Done.

3. Top directories of the repository should be `hw1`, `hw2`, ... Maintain two branches `main` and `develop`. The `develop` branch will be your main playground, the place where you develop solution (code) to homework problems and write up report. The `main` branch will be your presentation area. Submit your homework files (Quarto file `qmd`, `html` file converted by Quarto, all code and extra data sets to reproduce results) in the `main` branch.

**Solution:** Develop branch created.

4. After each homework due date, course reader and instructor will check out your `main` branch for grading. Tag each of your homework submissions with tag names `hw1`, `hw2`, ... Tagging time will be used as your submission time. That means if you tag your `hw1` submission after deadline, penalty points will be deducted for late submission.

**Solution:** ok.

5. After this course, you can make this repository public and use it to demonstrate your skill sets on job market.

**Solution:** cool.

## Q2. Data ethics training

This exercise (and later in this course) uses the [MIMIC-IV data v3.1](https://physionet.org/content/mimiciv/3.1/), a freely accessible critical care database developed by the MIT Lab for Computational Physiology. Follow the instructions at <https://mimic.mit.edu/docs/gettingstarted/> to (1) complete the CITI `Data or Specimens Only Research` course and (2) obtain the PhysioNet credential for using the MIMIC-IV data. Display the verification links to your completion report and completion certificate here. **You must complete Q2 before working on the remaining questions.** (Hint: The CITI training takes a few hours and the PhysioNet credentialing takes a couple days; do not leave it to the last minute.)

**Solution:** Here is the [link](https://www.citiprogram.org/verify/?k6514b1a2-bbfb-4067-b2ad-a177851ab712-67221985) to my Completion report, and [link](https://www.citiprogram.org/verify/?w699dc996-abef-45ec-baea-547391316b53-67221985) to my Completion Certificate.

## Q3. Linux Shell Commands

1. Make the MIMIC-IV v3.1 data available at location `~/mimic`. The output of the `ls -l ~/mimic` command should be similar to the below (from my laptop).
```{bash}
#| eval: true
# content of mimic folder
ls -l ~/mimic/
```
Refer to the documentation <https://physionet.org/content/mimiciv/3.1/> for details of data files. Do **not** put these data files into Git; they are big. Do **not** copy them into your directory. Do **not** decompress the gz data files. These create unnecessary big files and are not big-data-friendly practices. Read from the data folder `~/mimic` directly in following exercises. 

**Solution:** I downloaded MIMIC v3.1 to my pc and made it available at `~/mimic/`.

  Use Bash commands to answer following questions.

2. Display the contents in the folders `hosp` and `icu` using Bash command `ls -l`. Why are these data files distributed as `.csv.gz` files instead of `.csv` (comma separated values) files? Read the page <https://mimic.mit.edu/docs/iv/> to understand what's in each folder.

**Solution:** MIMIC-IV containing tons of real hospital stays for patients admitted, `.csv.gz` is more friendly dealing with big data, which can reduce file size, etc. 
```{bash}
ls -l ~/mimic/hosp/
ls -l ~/mimic/icu/
```

3. Briefly describe what Bash commands `zcat`, `zless`, `zmore`, and `zgrep` do.

**Solution:**  
`zcat` is used to display the content of `.csv.gz` compressed files without uncompressing files permanently. `zless` is used to view the content of a compressed file in scrolling way. `zmore`also displaying the compressed file content page by page. `zgrep` can search a specific word in the compressed file.
```{bash}
ls ~/mimic/hosp/admissions.csv.gz
zcat < ~/mimic/hosp/admissions.csv.gz | head -5
zless ~/mimic/hosp/admissions.csv.gz | head -5
zmore ~/mimic/hosp/admissions.csv.gz | head -5
zgrep "admission_type" ~/mimic/hosp/admissions.csv.gz
```
4. (Looping in Bash) What's the output of the following bash script?
```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
done
```
Display the number of lines in each data file using a similar loop. (Hint: combine linux commands `zcat <` and `wc -l`.)

**Solution:** 
The output is file permissions, number of links, owner name, owner group, file size, date and time of last modification, and file name/path. 
```{bash}
#| eval: false
for datafile in ~/mimic/hosp/{a,l,pa}*.gz
do
  ls -l $datafile
  zcat < $datafile | wc -l
done
```
5. Display the first few lines of `admissions.csv.gz`. *
How many rows are in this data file, excluding the header line? *
Each `hadm_id` identifies a hospitalization. How many hospitalizations are in this data file?
How many unique patients (identified by `subject_id`) are in this data file? Do they match the number of patients listed in the `patients.csv.gz` file? 
(Hint: combine Linux commands `zcat <`, `head`/`tail`, `awk`, `sort`, `uniq`, `wc`, and so on.)

**Solution:**
The first few lines of `admissions.csv.gz` are displayed below.
There are 546028 rows in this data file, excluding the header line. 
There are 546029 hospitalizations in this data file. 
There are 223453 unique patients in this data file. The number of patients listed in the `patients.csv.gz` file is 364627. Does not match.
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head -5

zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | wc -l

zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $2}' | sort | uniq | wc -l

zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $1}' | sort | uniq | wc -l
zcat < ~/mimic/hosp/patients.csv.gz | tail -n +2 | wc -l
```
6. What are the possible values taken by each of the variable `admission_type`, `admission_location`, `insurance`, and `ethnicity`? Also report the count for each unique value of these variables in decreasing order. (Hint: combine Linux commands `zcat`, `head`/`tail`, `awk`, `uniq -c`, `wc`, `sort`, and so on; skip the header line.)

**Solution:** The possible values taken by each of the variable and count for each unique value in decreasing order are displayed below.
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $6}' | sort | uniq -c | sort -nr

zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $8}' | sort | uniq -c | sort -nr

zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $10}' | sort | uniq -c | sort -nr

zcat < ~/mimic/hosp/admissions.csv.gz | tail -n +2 | awk -F, '{print $13}' | sort | uniq -c | sort -nr
```

7. The `icustays.csv.gz` file contains all the ICU stays during the study period. How many ICU stays, identified by `stay_id`, are in this data file? How many unique patients, identified by `subject_id`, are in this data file?

**Solution:** There are 994458 ICU stays in this data file. There are 65366 unique patients in this data file.
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head -1

zcat < ~/mimic/icu/icustays.csv.gz | tail -n +2 | awk -F, '{print $3}' | wc -l
zcat < ~/mimic/icu/icustays.csv.gz | tail -n +2 | awk -F, '{print $1}' | sort | uniq | wc -l
```
8. _To compress, or not to compress. That's the question._ Let's focus on the big data file `labevents.csv.gz`. Compare compressed gz file size to the uncompressed file size. Compare the run times of `zcat < ~/mimic/labevents.csv.gz | wc -l` versus `wc -l labevents.csv`. Discuss the trade off between storage and speed for big data files. (Hint: `gzip -dk < FILENAME.gz > ./FILENAME`. Remember to delete the large `labevents.csv` file after the exercise.)

**Solution:** Comressed file size is 2.4G, uncompressed file size is 17G. The run time of `zcat < ~/mimic/labevents.csv.gz | wc -l` is 15.454s, and the run time of `wc -l labevents.csv` is 15.537s. 
The trade off between storage and speed for big data files is that compressed files save storage space but take longer to process, while uncompressed files take up more storage space but are faster to process. This makes compressed files more suitable for long-term storage. (setting no output for this chunk)
```{bash}
#| eval: false
#| include: false
ls -lh ~/mimic/hosp/labevents.csv.gz
gzip -dk < ~/mimic/hosp/labevents.csv.gz > ./labevents.csv
ls -lh labevents.csv

time zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
time wc -l labevents.csv
```

## Q4. Who's popular in Price and Prejudice

1. You and your friend just have finished reading *Pride and Prejudice* by Jane Austen. Among the four main characters in the book, Elizabeth, Jane, Lydia, and Darcy, your friend thinks that Darcy was the most mentioned. You, however, are certain it was Elizabeth. Obtain the full text of the novel from <http://www.gutenberg.org/cache/epub/42671/pg42671.txt> and save to your local folder. 
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
```
Explain what `wget -nc` does. Do **not** put this text file `pg42671.txt` in Git. Complete the following loop to tabulate the number of times each of the four characters is mentioned using Linux commands.

**Solution:** `wget -nc` downloads the file, -nc to avoid downloading the file if it already exists. Elizabeth: 634, Jane: 293, Lydia: 171, Darcy: 418.
```{bash}
#| eval: false
wget -nc http://www.gutenberg.org/cache/epub/42671/pg42671.txt
for char in Elizabeth Jane Lydia Darcy
do
  echo $char:
  grep -o -i $char /Users/ningkezhang/Downloads/pg42671.txt | wc -l
done
```

2. What's the difference between the following two commands?

**Solution:**
The first command, '>' writes the output to a new file `test1.txt`, while the second command, '>>' appends the output to an existing file `test2.txt`.
```{bash}
#| eval: false
echo 'hello, world' > test1.txt
```
and
```{bash}
#| eval: false
echo 'hello, world' >> test2.txt
```

3. Using your favorite text editor (e.g., `vi`), type the following and save the file as `middle.sh`:
```{bash eval=FALSE}
#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"
```
Using `chmod` to make the file executable by the owner, and run
```{bash}
#| eval: false
./middle.sh pg42671.txt 20 5
```
Explain the output. Explain the meaning of `"$1"`, `"$2"`, and `"$3"` in this shell script. Why do we need the first line of the shell script?

**Solution:**
`"$1"` here is the first argument, which is the file pg42671.txt. `"$2"` is the second argument, which is 20, and `"$3"` is the third argument, for here is 5. `head -n "$2" "$1` is  selecting the first 20 lines of the file `pg42671.txt`, and `tail -n "$3"` is selecting the last 5 lines of the first 20 lines.
The first line of the shell script is a shebang, that tells the system which interpreter to use to run the script.
```{bash}
echo '#!/bin/sh
# Select lines from the middle of a file.
# Usage: bash middle.sh filename end_line num_lines
head -n "$2" "$1" | tail -n "$3"' > middle.sh

chmod u+x middle.sh
./middle.sh pg42671.txt 20 5
```

## Q5. More fun with Linux

Try following commands in Bash and interpret the results: `cal`, `cal 2025`, `cal 9 1752` (anything unusual?), `date`, `hostname`, `arch`, `uname -a`, `uptime`, `who am i`, `who`, `w`, `id`, `last | head`, `echo {con,pre}{sent,fer}{s,ed}`, `time sleep 5`, `history | tail`.

**Solution:**
`cal` displays the calendar for the current month. 
`cal 2025` displays the calendar for the year 2025. 
`cal 9 1752` displays the calendar for September 1752, but the calendar is incorrect because the Gregorian calendar was adopted in 1752. `date` displays the current date and time. 
`hostname` displays the name of the host. 
`arch` displays the architecture of the system. 
`uname -a` displays the system information. 
`uptime` displays the system uptime. 
`who am i` displays the current user. 
`who` displays the users currently logged in. 
`w` displays the users currently logged in and what they are doing. 
`id` displays the user and group information. 
`last | head` displays the last login information. 
`echo {con,pre}{sent,fer}{s,ed}` displays the combinations of the words. 
`time sleep 5` displays the time it takes to sleep for 5 seconds. 
`history | tail` displays the last few commands in the history.
```{bash}
cal
cal 2025
cal 9 1752
date
uname -a
uptime
who am i
who
w
id
last | head
echo {con,pre}{sent,fer}{s,ed}
time sleep 5
history | tail
```
## Q6. Book

1. Git clone the repository <https://github.com/christophergandrud/Rep-Res-Book> for the book _Reproducible Research with R and RStudio_ to your local machine. Do **not** put this repository within your homework repository `biostat-203b-2025-winter`.

2. Open the project by clicking `rep-res-3rd-edition.Rproj` and compile the book by clicking `Build Book` in the `Build` panel of RStudio. (Hint: I was able to build `git_book` and `epub_book` directly. For `pdf_book`, I needed to add a line `\usepackage{hyperref}` to the file `Rep-Res-Book/rep-res-3rd-edition/latex/preabmle.tex`.)

The point of this exercise is (1) to obtain the book for free and (2) to see an example how a complicated project such as a book can be organized in a reproducible way. Use `sudo apt install PKGNAME` to install required Ubuntu packages and `tlmgr install PKGNAME` to install missing TexLive packages.

For grading purpose, include a screenshot of Section 4.1.5 of the book here.

**Solution:** Here is the screenshot of Section 4.1.5.
![Screenshot of Section 4.1.5](Screenshot 4.1.5.png)