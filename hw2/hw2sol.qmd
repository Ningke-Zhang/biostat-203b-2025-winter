---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 7, 2025 @ 11:59PM
author: "Ningke Zhang 705834790"
format: 
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(duckdb)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer
```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Q1.1 Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage; all these readers can take gz file as input without explicit decompression.) 

**Solusion:**
`fread` is the fastest. 
The default parsed data types are different. `read.csv` uses `factor` for Character Columns, `num` or `int` for Numeric Columns, and `Chr` for Logical Columns, and automatically converted from character for factors. `read_csv` uses `chr` for character columns, `dbl` or `int` for numeric columns, parsed as date or datetime for date columns,`lgl` for logical columns. `fread` uses `chr` for character columns, `num` or `int` for numeric columns, `lgl` for logical columns. 
The memory usage of `fread` is the smallest.
```{r}
system.time(read.csv("~/mimic/hosp/admissions.csv.gz"))
system.time(read_csv("~/mimic/hosp/admissions.csv.gz"))
system.time(fread("~/mimic/hosp/admissions.csv.gz"))

str(read.csv("~/mimic/hosp/admissions.csv.gz"))
glimpse(read_csv("~/mimic/hosp/admissions.csv.gz"))
str(fread("~/mimic/hosp/admissions.csv.gz"))

pryr::object_size(read.csv("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(read_csv("~/mimic/hosp/admissions.csv.gz"))
pryr::object_size(fread("~/mimic/hosp/admissions.csv.gz"))
```
### Q1.2 User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

**Solusion:**
The run time is faster than the default data types. The memory usage is stay same.
```{r}
system.time(read_csv("~/mimic/hosp/admissions.csv.gz", 
                     col_types = cols()))
pryr::object_size(read_csv("~/mimic/hosp/admissions.csv.gz", 
                          col_types = cols()))
```
## Q2. Ingest big data files

<p align="center">
  <img src="./bigfile.png" width="50%">
</p>

Let us focus on a bigger file, `labevents.csv.gz`, which is about 130x bigger than `admissions.csv.gz`.
```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```
Display the first 10 lines of this file.
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head -10
```

### Q2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 3 minutes on your computer, then abort the program and report your findings. 

**Solusion:** Explain why read_csv cannot ingest labevents.csv.gz
It takes more than 5 minutes, and timing stopped, only 79.594 MiB of free RAM is available. Also, when I try `fread`, it shows: vector memory limit of 16.0 Gb reached, so processing Big Data is very demanding on RAM. 
```{r}
#| eval: false

system.time(read_csv("~/mimic/hosp/labevents.csv.gz"))
pryr::object_size(read_csv("~/mimic/hosp/labevents.csv.gz"))

system.time(fread("~/mimic/hosp/labevents.csv.gz"))
```

### Q2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

**Solusion:** 
For `read_csv` still can not solve the ingestion issue, but `fread` can take 36.124s to process, which menas fewer columns come with less memory usage and less processing to get faster ingestion. `read_csv` maybe cannot ingest gz files directly.
```{r}
#| eval: false

system.time(read_csv("~/mimic/hosp/labevents.csv.gz", 
            col_select = c("subject_id", "itemid", "charttime", "valuenum")))
pryr::object_size(read_csv("~/mimic/hosp/labevents.csv.gz", 
            col_select = c("subject_id", "itemid", "charttime", "valuenum")))

system.time(fread("~/mimic/hosp/labevents.csv.gz", 
            select = c("subject_id", "itemid", "charttime", "valuenum")))
```


### Q2.3 Ingest a subset of `labevents.csv.gz`

<p align="center">
  <img src="./linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: Use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. Do **not** put `labevents_filtered.csv.gz` in Git! To save render time, you can put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` before rendering your qmd file.)

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file, excluding the header? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?

**Solusion:**
There are 32679896 lines, excluding the header. It takes 12.492s, with 1.05 GB RAM.
```{bash}
#| eval: false

zcat < ~/mimic/hosp/labevents.csv.gz | 
awk -F',' 'NR==1 {print "subject_id,itemid,charttime,valuenum"; next} 
           ($5 == 50912 || $5 == 50971 || $5 == 50983 || $5 == 50902 || 
            $5 == 50882 || $5 == 51221 || $5 == 51301 || $5 == 50931) { 
           print $2","$5","$7","$10 }' | 
gzip > labevents_filtered.csv.gz
```

```{bash}
zcat < labevents_filtered.csv.gz | head -10

zcat < labevents_filtered.csv.gz | tail -n +2 | wc -l

```

```{r}
system.time(
  lab <- read_csv("labevents_filtered.csv.gz")
)
pryr::object_size(lab)

```

### Q2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory (do not add it in git!). To save render time, put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` when rendering your qmd file.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 

**Solusion:**
The process takes 3.233s. Apache Arrow keeps data in a special format that we can read instantly, without wasting time converting files. 
```{bash}
#| eval: false
gunzip -c labevents_filtered.csv.gz > labevents.csv
```

```{r}
system.time({
  lab_csv <- open_dataset("labevents.csv", format = "csv")

  arrow <- lab_csv |>
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% 
             c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) |>
    collect()  
})

nrow(arrow)

print(head(arrow, 10))
```

### Q2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

**Solusion:**
The Parquet is 128M, process takes 0.830s. Parquet is like a ZIP file for big data. It compresses and organizes information, only reads whatâ€™s needed, so it takes up less space and loads much faster than read_csv. 
```{r}
parquet <- "labevents_parquet"

write_dataset(open_dataset("labevents.csv", format = "csv"), 
              path = parquet, format = "parquet")

system(sprintf("du -sh %s", parquet))

system.time({
  parquet_ds <- open_dataset(parquet, format = "parquet")

  parquet_df <- parquet_ds |>
    select(subject_id, itemid, charttime, valuenum) |>
    filter(itemid %in% 
             c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) |>
    collect()
})

nrow(parquet_df)

print(head(parquet_df, 10))
```
### Q2.6 DuckDB

<p align="center">
  <img src="./duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

**Solusion:**
It takes 1.327s to process. DuckDB is a high-performance, lightweight database that runs locally. If opening an excel table with millions of rows of data will get stuck, use DuckDB to filter, calculate and merge data will be on the fly.
```{r}
system.time({
  parquet_db <- open_dataset("labevents_parquet", format = "parquet")
  con <- dbConnect(duckdb())
  db <- to_duckdb(parquet_db, con = con)
  duckdb_df <- db |>
    select(subject_id, itemid, charttime, valuenum) |>
    filter(itemid %in% 
             c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)) |>
    collect()
})

nrow(duckdb_df)

print(head(duckdb_df, 10))

dbDisconnect(con)
```
## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patientâ€™s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
How many rows? 433 millions.
```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | tail -n +2 | wc -l
```
[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```
In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

**Solusion:**
The file `chartevents_filtered.csv.gz` which is after compressed contains 30195426 rows, the first 10 rows are displaied.
```{r}
# Open dataset as arrow table
chartevents <- open_dataset("~/mimic/icu/chartevents.csv.gz", format = "csv")

# Filter and select relevant columns
chartevents_filtered <- chartevents |>
  select(subject_id, itemid, charttime, value) |>
  filter(itemid %in% c(220045, 220181, 220179, 223761, 220210)) |>
  collect()
```

```{r}
# Save as a compressed CSV
write_csv_arrow(chartevents_filtered, "chartevents_filtered.csv.gz")
```

```{bash}
#Display first 10 rows
zcat < chartevents_filtered.csv.gz | head -10
#Display the number of rows
zcat < chartevents_filtered.csv.gz | tail -n +2 | wc -l
```